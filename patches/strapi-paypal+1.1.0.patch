diff --git a/node_modules/strapi-paypal/admin/src/components/Configuration/index.js b/node_modules/strapi-paypal/admin/src/components/Configuration/index.js
index 0641923..36b9e44 100644
--- a/node_modules/strapi-paypal/admin/src/components/Configuration/index.js
+++ b/node_modules/strapi-paypal/admin/src/components/Configuration/index.js
@@ -29,11 +29,11 @@ import {
 
 import currencies from './constant';
 import { savePaypalConfiguration, getPaypalConfiguration } from '../../utils/apiCalls';
-
-const apiToken = process.env.STRAPI_ADMIN_API_TOKEN;
+import { env } from '@strapi/utils';
 
 const Configuration = () => {
-  const [paypalConfiguration, setPaypalConfiguration] = useState({
+const apiToken = env('STRAPI_ADMIN_API_TOKEN');
+const [paypalConfiguration, setPaypalConfiguration] = useState({
     isLiveMode: false,
     checkoutSuccessUrl: '',
     checkoutCancelUrl: '',
diff --git a/node_modules/strapi-paypal/admin/src/components/ProductList/index.js b/node_modules/strapi-paypal/admin/src/components/ProductList/index.js
index 1356c8d..250f4f0 100644
--- a/node_modules/strapi-paypal/admin/src/components/ProductList/index.js
+++ b/node_modules/strapi-paypal/admin/src/components/ProductList/index.js
@@ -15,12 +15,12 @@ import {
   createPaypalProduct,
   getPaypalConfiguration,
 } from '../../utils/apiCalls';
-
-const apiToken = process.env.STRAPI_ADMIN_API_TOKEN;
+import { env } from '@strapi/utils';
 
 const limit = 5;
 const ProductList = () => {
-  const search = useLocation().search;
+const apiToken = env('STRAPI_ADMIN_API_TOKEN');
+const search = useLocation().search;
   const page = new URLSearchParams(search).get('page');
   const pageNumber = page ? parseInt(page, 10) : 1;
 
diff --git a/node_modules/strapi-paypal/admin/src/utils/axiosInstance.js b/node_modules/strapi-paypal/admin/src/utils/axiosInstance.js
index a47e0bf..cb9ee08 100644
--- a/node_modules/strapi-paypal/admin/src/utils/axiosInstance.js
+++ b/node_modules/strapi-paypal/admin/src/utils/axiosInstance.js
@@ -4,10 +4,11 @@
  */
 
 import axios from 'axios';
+import { env } from '@strapi/utils';
 
 const createInstance = apiToken => {
   const instance = axios.create({
-    baseURL: process.env.STRAPI_ADMIN_BACKEND_URL,
+    baseURL: env('STRAPI_ADMIN_BACKEND_URL'),
   });
 
   instance.interceptors.request.use(
diff --git a/node_modules/strapi-paypal/server/services/paypalAccessToken.js b/node_modules/strapi-paypal/server/services/paypalAccessToken.js
index 1786f7c..2e807f5 100644
--- a/node_modules/strapi-paypal/server/services/paypalAccessToken.js
+++ b/node_modules/strapi-paypal/server/services/paypalAccessToken.js
@@ -7,103 +7,106 @@ const { ApplicationError } = require('@strapi/utils').errors;
 const axiosInstance = require('axios');
 const qs = require('qs');
 const moment = require('moment');
+const { env } = require('@strapi/utils');
 
-const livePaypalClientId = process.env.STRAPI_ADMIN_LIVE_PAYPAL_CLIENT_ID;
-const livePaypalSecret = process.env.STRAPI_ADMIN_LIVE_PAYPAL_CLIENT_SECRET;
-const testPaypalClientId = process.env.STRAPI_ADMIN_SANDBOX_PAYPAL_CLIENT_ID;
-const testPaypalSecret = process.env.STRAPI_ADMIN_SANDBOX_PAYPAL_CLIENT_SECRET;
+module.exports = ({ strapi }) => {
+  const livePaypalClientId = env('STRAPI_ADMIN_LIVE_PAYPAL_CLIENT_ID');
+  const livePaypalSecret = env('STRAPI_ADMIN_LIVE_PAYPAL_CLIENT_SECRET');
+  const testPaypalClientId = env('STRAPI_ADMIN_SANDBOX_PAYPAL_CLIENT_ID');
+  const testPaypalSecret = env('STRAPI_ADMIN_SANDBOX_PAYPAL_CLIENT_SECRET');
   
-module.exports = ({ strapi }) => ({
-  // get paypal access token
-  async getAccessToken() {
-    const { settings, paypalSandBoxUrl, paypalLiveUrl } = await strapi
-      .plugin('strapi-paypal')
-      .service('paypalService')
-      .initialize();
+  return ({
+    // get paypal access token
+    async getAccessToken() {
+      const { settings, paypalSandBoxUrl, paypalLiveUrl } = await strapi
+        .plugin('strapi-paypal')
+        .service('paypalService')
+        .initialize();
   
-    const { isLiveMode } = settings;
+      const { isLiveMode } = settings;
   
-    const clientId = isLiveMode ? livePaypalClientId : testPaypalClientId;
-    const secret = isLiveMode ? livePaypalSecret : testPaypalSecret;
-    const url = isLiveMode ? paypalLiveUrl : paypalSandBoxUrl;
+      const clientId = isLiveMode ? livePaypalClientId : testPaypalClientId;
+      const secret = isLiveMode ? livePaypalSecret : testPaypalSecret;
+      const url = isLiveMode ? paypalLiveUrl : paypalSandBoxUrl;
   
-    const pluginStore = strapi.store({
-      environment: strapi.config.environment,
-      type: 'plugin',
-      name: 'strapi-paypal',
-    });
-    const sandboxAuth = await pluginStore.get({ key: 'sandboxAuth' });
-    const liveAuth = await pluginStore.get({ key: 'liveAuth' });
+      const pluginStore = strapi.store({
+        environment: strapi.config.environment,
+        type: 'plugin',
+        name: 'strapi-paypal',
+      });
+      const sandboxAuth = await pluginStore.get({ key: 'sandboxAuth' });
+      const liveAuth = await pluginStore.get({ key: 'liveAuth' });
   
-    let authentication;
-    const today = new Date();
+      let authentication;
+      const today = new Date();
   
-    switch (settings.isLiveMode) {
-      case false:
-        if (
-          sandboxAuth &&
-          sandboxAuth.access_token &&
-          moment(sandboxAuth.expires_in).isAfter(today)
-        ) {
-          authentication = sandboxAuth.access_token;
-        } else {
-          // @ts-ignore
-          const response = await axiosInstance({
-            method: 'post',
-            url: `${url}/v1/oauth2/token`,
-            headers: {
-              'Content-Type': 'application/x-www-form-urlencoded',
-            },
-            data: qs.stringify({
-              grant_type: 'client_credentials',
-            }),
-            auth: {
-              username: clientId,
-              password: secret,
-            },
-          });
-          await pluginStore.set({
-            key: 'sandboxAuth',
-            value: {
-              access_token: response.data.access_token,
-              expires_in: new Date(Date.now() + response.data.expires_in * 1000),
-            },
-          });
-          authentication = response.data.access_token;
-        }
-        break;
-      case true:
-        if (liveAuth && liveAuth.access_token && moment(liveAuth.expires_in).isAfter(today)) {
-          authentication = liveAuth.access_token;
-        } else {
-          // @ts-ignore
-          const response = await axiosInstance({
-            method: 'post',
-            url: `${url}/v1/oauth2/token`,
-            headers: {
-              'Content-Type': 'application/x-www-form-urlencoded',
-            },
-            data: qs.stringify({
-              grant_type: 'client_credentials',
-            }),
-            auth: {
-              username: clientId,
-              password: secret,
-            },
-          });
-          await pluginStore.set({
-            key: 'liveAuth',
-            value: {
-              access_token: response.data.access_token,
-              expires_in: new Date(Date.now() + response.data.expires_in * 1000),
-            },
-          });
-          authentication = response.data.access_token;
-        }
-        break;
-      default:
-        throw new ApplicationError('Invalid paypal mode');
-    }
-    return authentication;
-  },
-});
+      switch (settings.isLiveMode) {
+        case false:
+          if (
+            sandboxAuth &&
+            sandboxAuth.access_token &&
+            moment(sandboxAuth.expires_in).isAfter(today)
+          ) {
+            authentication = sandboxAuth.access_token;
+          } else {
+            // @ts-ignore
+            const response = await axiosInstance({
+              method: 'post',
+              url: `${url}/v1/oauth2/token`,
+              headers: {
+                'Content-Type': 'application/x-www-form-urlencoded',
+              },
+              data: qs.stringify({
+                grant_type: 'client_credentials',
+              }),
+              auth: {
+                username: clientId,
+                password: secret,
+              },
+            });
+            await pluginStore.set({
+              key: 'sandboxAuth',
+              value: {
+                access_token: response.data.access_token,
+                expires_in: new Date(Date.now() + response.data.expires_in * 1000),
+              },
+            });
+            authentication = response.data.access_token;
+          }
+          break;
+        case true:
+          if (liveAuth && liveAuth.access_token && moment(liveAuth.expires_in).isAfter(today)) {
+            authentication = liveAuth.access_token;
+          } else {
+            // @ts-ignore
+            const response = await axiosInstance({
+              method: 'post',
+              url: `${url}/v1/oauth2/token`,
+              headers: {
+                'Content-Type': 'application/x-www-form-urlencoded',
+              },
+              data: qs.stringify({
+                grant_type: 'client_credentials',
+              }),
+              auth: {
+                username: clientId,
+                password: secret,
+              },
+            });
+            await pluginStore.set({
+              key: 'liveAuth',
+              value: {
+                access_token: response.data.access_token,
+                expires_in: new Date(Date.now() + response.data.expires_in * 1000),
+              },
+            });
+            authentication = response.data.access_token;
+          }
+          break;
+        default:
+          throw new ApplicationError('Invalid paypal mode');
+      }
+      return authentication;
+    },
+  })
+};
diff --git a/node_modules/strapi-paypal/server/services/paypalService.js b/node_modules/strapi-paypal/server/services/paypalService.js
index c8b5037..e8ac51e 100644
--- a/node_modules/strapi-paypal/server/services/paypalService.js
+++ b/node_modules/strapi-paypal/server/services/paypalService.js
@@ -6,199 +6,202 @@
 
 const { ApplicationError } = require('@strapi/utils').errors;
 const axiosInstance = require('axios');
-
-const paypalSandBoxUrl = process.env.STRAPI_ADMIN_PAYPAL_SANDBOX_API_URL;
-const paypalLiveUrl = process.env.STRAPI_ADMIN_PAYPAL_LIVE_API_URL;
-
-module.exports = ({ strapi }) => ({
-  async initialize() {
-    const pluginStore = strapi.store({
-      environment: strapi.config.environment,
-      type: 'plugin',
-      name: 'strapi-paypal',
-    });
-    const settings = await pluginStore.get({ key: 'paypalSetting' });
-
-    return { settings, paypalSandBoxUrl, paypalLiveUrl };
-  },
-
-  async createStrapiProduct(
-    title,
-    productPrice,
-    description,
-    isSubscription,
-    paymentInterval,
-    trialPeriodDays,
-    productType
-  ) {
-    try {
-      // get access token
-      const accessToken = await strapi
-        .plugin('strapi-paypal')
-        .service('paypalAccessToken')
-        .getAccessToken();
-
-      let result;
-
-      const { settings, paypalSandBoxUrl, paypalLiveUrl } = await this.initialize();
-
-      const { isLiveMode, checkoutCancelUrl, checkoutSuccessUrl, currency } = settings;
-
-      const url = isLiveMode ? paypalLiveUrl : paypalSandBoxUrl;
-
-      if (isSubscription) {
-        result = await strapi
+const { env } = require('@strapi/utils')
+
+module.exports = ({ strapi }) => {
+  const paypalSandBoxUrl = env('STRAPI_ADMIN_PAYPAL_SANDBOX_API_URL');
+  const paypalLiveUrl = env('STRAPI_ADMIN_PAYPAL_LIVE_API_URL');
+  
+  return ({
+    async initialize() {
+      const pluginStore = strapi.store({
+        environment: strapi.config.environment,
+        type: 'plugin',
+        name: 'strapi-paypal',
+      });
+      const settings = await pluginStore.get({ key: 'paypalSetting' });
+  
+      return { settings, paypalSandBoxUrl, paypalLiveUrl };
+    },
+  
+    async createStrapiProduct(
+      title,
+      productPrice,
+      description,
+      isSubscription,
+      paymentInterval,
+      trialPeriodDays,
+      productType
+    ) {
+      try {
+        // get access token
+        const accessToken = await strapi
           .plugin('strapi-paypal')
-          .service('paypalSubscription')
-          .createSubscription(
-            title,
-            productPrice,
-            description,
-            isSubscription,
-            paymentInterval,
-            trialPeriodDays,
-            productType,
-            accessToken,
-            url,
-            checkoutCancelUrl,
-            checkoutSuccessUrl,
-            currency
-          );
-        const { id, links } = result;
-        console.log('subscription', links);
-        if (id) {
-          const product = await strapi.query('plugin::strapi-paypal.paypal-product').create({
-            data: {
+          .service('paypalAccessToken')
+          .getAccessToken();
+  
+        let result;
+  
+        const { settings, paypalSandBoxUrl, paypalLiveUrl } = await this.initialize();
+  
+        const { isLiveMode, checkoutCancelUrl, checkoutSuccessUrl, currency } = settings;
+  
+        const url = isLiveMode ? paypalLiveUrl : paypalSandBoxUrl;
+  
+        if (isSubscription) {
+          result = await strapi
+            .plugin('strapi-paypal')
+            .service('paypalSubscription')
+            .createSubscription(
               title,
+              productPrice,
               description,
-              price: productPrice,
-              currency: settings.currency,
               isSubscription,
-              interval: paymentInterval,
+              paymentInterval,
               trialPeriodDays,
-              paypalSubcriptionId: id,
-              paypalLinks: links,
-            },
-            populate: true,
-          });
-          return product;
-        }
-      } else {
-        // create paypal order
-        result = await strapi
-          .plugin('strapi-paypal')
-          .service('paypalOrder')
-          .createOrder(
-            title,
-            productPrice,
-            description,
-            accessToken,
-            checkoutSuccessUrl,
-            checkoutCancelUrl,
-            currency,
-            url
-          );
-        const { id, status, links } = result;
-        console.log('order', links);
-        // onsuccess create order store in database
-        if (status === 'CREATED') {
-          const create = await strapi.query('plugin::strapi-paypal.paypal-product').create({
-            data: {
+              productType,
+              accessToken,
+              url,
+              checkoutCancelUrl,
+              checkoutSuccessUrl,
+              currency
+            );
+          const { id, links } = result;
+          console.log('subscription', links);
+          if (id) {
+            const product = await strapi.query('plugin::strapi-paypal.paypal-product').create({
+              data: {
+                title,
+                description,
+                price: productPrice,
+                currency: settings.currency,
+                isSubscription,
+                interval: paymentInterval,
+                trialPeriodDays,
+                paypalSubcriptionId: id,
+                paypalLinks: links,
+              },
+              populate: true,
+            });
+            return product;
+          }
+        } else {
+          // create paypal order
+          result = await strapi
+            .plugin('strapi-paypal')
+            .service('paypalOrder')
+            .createOrder(
               title,
+              productPrice,
               description,
-              price: productPrice,
-              currency: settings.currency,
-              isSubscription,
-              interval: paymentInterval,
-              trialPeriodDays,
-              paypalOrderId: id,
-              paypalLinks: links,
-            },
-            populate: true,
-          });
-          return create;
+              accessToken,
+              checkoutSuccessUrl,
+              checkoutCancelUrl,
+              currency,
+              url
+            );
+          const { id, status, links } = result;
+          console.log('order', links);
+          // onsuccess create order store in database
+          if (status === 'CREATED') {
+            const create = await strapi.query('plugin::strapi-paypal.paypal-product').create({
+              data: {
+                title,
+                description,
+                price: productPrice,
+                currency: settings.currency,
+                isSubscription,
+                interval: paymentInterval,
+                trialPeriodDays,
+                paypalOrderId: id,
+                paypalLinks: links,
+              },
+              populate: true,
+            });
+            return create;
+          }
         }
+      } catch (error) {
+        console.log(error.response.data);
+        throw new ApplicationError(error.message);
       }
-    } catch (error) {
-      console.log(error.response.data);
-      throw new ApplicationError(error.message);
-    }
-  },
-  async find(offset, limit, sort, order) {
-    try {
-      let needToshort;
-      if (sort === 'name') {
-        needToshort = { title: `${order}` };
-      } else if (sort === 'price') {
-        needToshort = { price: `${order}` };
-      }
-      const count = await strapi.query('plugin::strapi-paypal.paypal-product').count();
+    },
+    async find(offset, limit, sort, order) {
+      try {
+        let needToshort;
+        if (sort === 'name') {
+          needToshort = { title: `${order}` };
+        } else if (sort === 'price') {
+          needToshort = { price: `${order}` };
+        }
+        const count = await strapi.query('plugin::strapi-paypal.paypal-product').count();
   
-      const response = await strapi.query('plugin::strapi-paypal.paypal-product').findMany({
-        orderBy: needToshort,
-        offset,
-        limit,
-        populate: true,
-      });
+        const response = await strapi.query('plugin::strapi-paypal.paypal-product').findMany({
+          orderBy: needToshort,
+          offset,
+          limit,
+          populate: true,
+        });
+  
+        return { response, count };
+      } catch (error) {
+        console.log(error);
+        throw new ApplicationError(error.message);
+      }
+    },
+  
+    async findOne(id) {
+      try {
+        const response = await strapi
+          .query('plugin::strapi-paypal.paypal-product')
+          .findOne({ where: { id }, populate: true });
+        return response;
+      } catch (error) {
+        console.log(error);
+        throw new ApplicationError(error.message);
+      }
+    },
   
-      return { response, count };
-    } catch (error) {
-      console.log(error);
-      throw new ApplicationError(error.message);
-    }
-  },
-
-  async findOne(id) {
-    try {
-      const response = await strapi
-        .query('plugin::strapi-paypal.paypal-product')
-        .findOne({ where: { id }, populate: true });
-      return response;
-    } catch (error) {
-      console.log(error);
-      throw new ApplicationError(error.message);
-    }
-  },
-
-  async getPaypalCheckout(isSubscription, paypalOrderId, paypalSubcriptionId) {
-    try {
-      // get access token
-      const accessToken = await strapi
-        .plugin('strapi-paypal')
-        .service('paypalAccessToken')
-        .getAccessToken();
-      const { settings, paypalSandBoxUrl, paypalLiveUrl } = await this.initialize();
-
-      const { isLiveMode } = settings;
-
-      const url = isLiveMode ? paypalLiveUrl : paypalSandBoxUrl;
-      let response;
-
-      if (isSubscription) {
-        // get paypal subscription details
-        response = await axiosInstance.get(
-          `${url}/v1/billing/subscriptions/${paypalSubcriptionId}`,
-
-          {
+    async getPaypalCheckout(isSubscription, paypalOrderId, paypalSubcriptionId) {
+      try {
+        // get access token
+        const accessToken = await strapi
+          .plugin('strapi-paypal')
+          .service('paypalAccessToken')
+          .getAccessToken();
+        const { settings, paypalSandBoxUrl, paypalLiveUrl } = await this.initialize();
+  
+        const { isLiveMode } = settings;
+  
+        const url = isLiveMode ? paypalLiveUrl : paypalSandBoxUrl;
+        let response;
+  
+        if (isSubscription) {
+          // get paypal subscription details
+          response = await axiosInstance.get(
+            `${url}/v1/billing/subscriptions/${paypalSubcriptionId}`,
+  
+            {
+              headers: {
+                Authorization: `Bearer ${accessToken}`,
+                'Content-Type': 'application/json',
+              },
+            }
+          );
+        } else {
+          // get paypal order details
+          response = await axiosInstance.get(`${url}/v2/checkout/orders/${paypalOrderId}`, {
             headers: {
               Authorization: `Bearer ${accessToken}`,
               'Content-Type': 'application/json',
             },
-          }
-        );
-      } else {
-        // get paypal order details
-        response = await axiosInstance.get(`${url}/v2/checkout/orders/${paypalOrderId}`, {
-          headers: {
-            Authorization: `Bearer ${accessToken}`,
-            'Content-Type': 'application/json',
-          },
-        });
+          });
+        }
+        return response.data;
+      } catch (error) {
+        console.log(error);
+        throw new ApplicationError(error.message);
       }
-      return response.data;
-    } catch (error) {
-      console.log(error);
-      throw new ApplicationError(error.message);
-    }
-  },
-});
+    },
+  });
+}
